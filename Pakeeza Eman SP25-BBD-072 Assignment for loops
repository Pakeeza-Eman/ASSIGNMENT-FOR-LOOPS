{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "238f41b7-337c-4c82-b098-55ce52f4fdb3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "4\n",
      "6\n",
      "8\n",
      "10\n",
      "12\n",
      "14\n",
      "16\n",
      "18\n",
      "20\n"
     ]
    }
   ],
   "source": [
    "# Q1 Write a for loop to print all even numbers from 2 to 20.\n",
    "\n",
    "numbers=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n",
    "for number in range(2,21,2):\n",
    "    print(number)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "1cf68b29-2420-4593-95bd-21e6f0012ef4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "9\n",
      "8\n",
      "7\n",
      "6\n",
      "5\n",
      "4\n",
      "3\n",
      "2\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "#Q2 Use a for loop with range() to print numbers from 10 to 1 in reverse order.\n",
    "\n",
    "numbers=[1,2,3,4,5,6,7,8,9,10]\n",
    "for i in range(10,0,-1):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "2da6c9a2-5a45-42d1-8a5e-bec08ab84198",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ALI\n",
      "WASIF\n",
      "FIZAN\n"
     ]
    }
   ],
   "source": [
    "#Q3 Create a list of names and use a for loop to print each name in uppercase.\n",
    "\n",
    "names=['ali','wasif','fizan']\n",
    "for name in names:\n",
    "    print(name.upper())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "04d50f50-fccc-4457-9ecd-6a96f82728e7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n",
      "12\n"
     ]
    }
   ],
   "source": [
    "#Q4 Iterate through a list of integers and print only the numbers that are divisible by 3.\n",
    "\n",
    "numbers=[9,12,13,16,25,28]\n",
    "for number in numbers:\n",
    "    if number % 3 == 0:\n",
    "       print(number)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "088f8026-fd8a-42cb-af04-e44c69d23f53",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "4\n",
      "9\n",
      "16\n",
      "25\n",
      "36\n",
      "49\n",
      "64\n",
      "81\n",
      "100\n"
     ]
    }
   ],
   "source": [
    "#Q5 Write a loop that prints the squares of numbers from 1 to 10.\n",
    "\n",
    "numbers=[1,2,3,4,5,6,7,8,9,10]\n",
    "for number in range(1,11):\n",
    "    number=number**2\n",
    "    print(number)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "636e3707-0f06-459a-bfed-6806a6e9445e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0°C = 32.0°F\n",
      "10°C = 50.0°F\n",
      "20°C = 68.0°F\n",
      "30°C = 86.0°F\n",
      "40°C = 104.0°F\n",
      "100°C = 212.0°F\n"
     ]
    }
   ],
   "source": [
    "#Q6 Given a list of temperatures in Celsius, use a for loop to convert each to Fahrenheit.\n",
    "\n",
    "celsius_temps = [0, 10, 20, 30, 40, 100]\n",
    "for c in celsius_temps:\n",
    "    fahrenheit = (c * 9/5) + 32\n",
    "    print(f\"{c}°C = {fahrenheit}°F\")\n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "ac6dc949-2070-4e8f-bfd8-cc77902eb9f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 x 1 = 5\n",
      "5 x 2 = 10\n",
      "5 x 3 = 15\n",
      "5 x 4 = 20\n",
      "5 x 5 = 25\n",
      "5 x 6 = 30\n",
      "5 x 7 = 35\n",
      "5 x 8 = 40\n",
      "5 x 9 = 45\n",
      "5 x 10 = 50\n"
     ]
    }
   ],
   "source": [
    "#Q7 Create a for loop that prints the multiplication table of 5.\n",
    "\n",
    "number=[1,2,3,4,5,6,7,8,9,10]\n",
    "for i in range(1, 11):  \n",
    "    print(f\"5 x {i} = {5 * i}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "5f154ef4-08e9-4f09-9b6e-62c0e9865a20",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum of all numbers in the list is: 75\n"
     ]
    }
   ],
   "source": [
    "#Q8 Write a program to find the sum of all numbers in a list using a for loop.\n",
    "\n",
    "numbers = [5, 10, 15, 20, 25]  \n",
    "sum_of_numbers = 0 \n",
    "for num in numbers:\n",
    "    sum_of_numbers += num \n",
    "print(\"Sum of all numbers in the list is:\", sum_of_numbers)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "efb928e8-0475-4976-8d4c-179d95c39191",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P\n",
      "y\n",
      "t\n",
      "h\n",
      "o\n",
      "n\n"
     ]
    }
   ],
   "source": [
    "#Q9 Use a for loop to iterate through a string and print each character separately.\n",
    "\n",
    "text = \"Python\" \n",
    "for char in text:\n",
    "    print(char)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "87a64ce7-afea-4f35-ad31-27979c25dcec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "banana\n",
      "elephant\n",
      "computer\n"
     ]
    }
   ],
   "source": [
    "#Q10 Create a list of words and use a for loop to print only the words with more than 5 letters.\n",
    "\n",
    "\n",
    "words = [\"apple\", \"banana\", \"cat\", \"elephant\", \"dog\", \"computer\", \"pen\"]\n",
    "for word in words:\n",
    "    if len(word) > 5: \n",
    "        print(word)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
